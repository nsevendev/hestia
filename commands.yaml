commands:
  gcm: # goose creation migration (vide et auto incrementer) 
    description: creation d'une migration incrementée (cela génere un fichier sql) -- env-NSC_NAME_CONTAINER_APP(obligatoire) -- variable nameFile(obligatoire)
    command: docker exec -i *NSC_NAME_CONTAINER_APP* goose create -s {{nameFile}} sql --dir ./migrations
  gup: # goose up (applique les migrations) 
    description: applique les migrations -- env-NSC_NAME_CONTAINER_APP(obligatoire) env-NSC_MIGRATION_DB_URL(obligatoire)
    command: docker exec -i *NSC_NAME_CONTAINER_APP* goose -dir ./migrations postgres *NSC_MIGRATION_DB_URL* up
  dev: # mode dev
    description: demarre le projet en mode dev (se base sur le .env)
    command: docker compose --env-file .env -f compose.yaml -f compose.override.yaml up -d
  devb: # mode dev avec build
    description: demarre le projet en mode dev avec build (se base sur le .env)
    command: docker compose --env-file .env -f compose.yaml -f compose.override.yaml up -d --build
  devbnod: # mode dev avec build mode detach
    description: demarre le projet en mode dev avec build + le mode no detach (se base sur le .env)
    command: docker compose --env-file .env -f compose.yaml -f compose.override.yaml up --build
  prod: # mise en prod
    description: demarre le projet pour la prod ou pour la recette, changer les variables d'environement pour modifier le host (se base sur le .env)
    command: docker compose --env-file .env -f compose.prod.yaml up -d --build